// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (user_id, subscription_id, stripe_payment_intent_id, stripe_invoice_id, stripe_session_id, amount_cents, currency, status, payment_method, failure_reason, paid_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreatePaymentParams struct {
	UserID                uuid.UUID      `db:"user_id" json:"user_id"`
	SubscriptionID        uuid.UUID      `db:"subscription_id" json:"subscription_id"`
	StripePaymentIntentID string         `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeInvoiceID       sql.NullString `db:"stripe_invoice_id" json:"stripe_invoice_id"`
	StripeSessionID       sql.NullString `db:"stripe_session_id" json:"stripe_session_id"`
	AmountCents           int32          `db:"amount_cents" json:"amount_cents"`
	Currency              string         `db:"currency" json:"currency"`
	Status                string         `db:"status" json:"status"`
	PaymentMethod         string         `db:"payment_method" json:"payment_method"`
	FailureReason         *string        `db:"failure_reason" json:"failure_reason"`
	PaidAt                *time.Time     `db:"paid_at" json:"paid_at"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, createPayment,
		arg.UserID,
		arg.SubscriptionID,
		arg.StripePaymentIntentID,
		arg.StripeInvoiceID,
		arg.StripeSessionID,
		arg.AmountCents,
		arg.Currency,
		arg.Status,
		arg.PaymentMethod,
		arg.FailureReason,
		arg.PaidAt,
	)
	return err
}

const createPlan = `-- name: CreatePlan :exec
INSERT INTO plans (name, price_monthly, max_websites, check_interval_seconds, has_performance_reports, has_seo_audits, has_public_status_page )
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreatePlanParams struct {
	Name                  string `db:"name" json:"name"`
	PriceMonthly          string `db:"price_monthly" json:"price_monthly"`
	MaxWebsites           int32  `db:"max_websites" json:"max_websites"`
	CheckIntervalSeconds  int32  `db:"check_interval_seconds" json:"check_interval_seconds"`
	HasPerformanceReports bool   `db:"has_performance_reports" json:"has_performance_reports"`
	HasSeoAudits          bool   `db:"has_seo_audits" json:"has_seo_audits"`
	HasPublicStatusPage   bool   `db:"has_public_status_page" json:"has_public_status_page"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) error {
	_, err := q.db.ExecContext(ctx, createPlan,
		arg.Name,
		arg.PriceMonthly,
		arg.MaxWebsites,
		arg.CheckIntervalSeconds,
		arg.HasPerformanceReports,
		arg.HasSeoAudits,
		arg.HasPublicStatusPage,
	)
	return err
}

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscriptions (user_id ,plan_id, status, stripe_subscription_id, current_period_ends_at )
VALUES ($1 , $2, $3, $4, $5)
`

type CreateSubscriptionParams struct {
	UserID               uuid.UUID  `db:"user_id" json:"user_id"`
	PlanID               int32      `db:"plan_id" json:"plan_id"`
	Status               string     `db:"status" json:"status"`
	StripeSubscriptionID *string    `db:"stripe_subscription_id" json:"stripe_subscription_id"`
	CurrentPeriodEndsAt  *time.Time `db:"current_period_ends_at" json:"current_period_ends_at"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, createSubscription,
		arg.UserID,
		arg.PlanID,
		arg.Status,
		arg.StripeSubscriptionID,
		arg.CurrentPeriodEndsAt,
	)
	return err
}

const getPlanByID = `-- name: GetPlanByID :one
SELECT id, name, price_monthly, max_websites, check_interval_seconds, has_performance_reports, has_seo_audits, has_public_status_page FROM plans
WHERE id = $1
`

func (q *Queries) GetPlanByID(ctx context.Context, id int32) (Plan, error) {
	row := q.db.QueryRowContext(ctx, getPlanByID, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PriceMonthly,
		&i.MaxWebsites,
		&i.CheckIntervalSeconds,
		&i.HasPerformanceReports,
		&i.HasSeoAudits,
		&i.HasPublicStatusPage,
	)
	return i, err
}

const getPlanByName = `-- name: GetPlanByName :one
SELECT id, name, price_monthly, max_websites, check_interval_seconds, has_performance_reports, has_seo_audits, has_public_status_page FROM plans 
WHERE name = $1
`

func (q *Queries) GetPlanByName(ctx context.Context, name string) (Plan, error) {
	row := q.db.QueryRowContext(ctx, getPlanByName, name)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PriceMonthly,
		&i.MaxWebsites,
		&i.CheckIntervalSeconds,
		&i.HasPerformanceReports,
		&i.HasSeoAudits,
		&i.HasPublicStatusPage,
	)
	return i, err
}

const getSubscriptionByStripeSbId = `-- name: GetSubscriptionByStripeSbId :one
SELECT id, user_id, plan_id, status, stripe_subscription_id, current_period_ends_at, created_at, updated_at FROM subscriptions 
WHERE stripe_subscription_id = $1
`

func (q *Queries) GetSubscriptionByStripeSbId(ctx context.Context, stripeSubscriptionID *string) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByStripeSbId, stripeSubscriptionID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.StripeSubscriptionID,
		&i.CurrentPeriodEndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password_hash, email_verified_at, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, email_verified_at, created_at, updated_at FROM users 
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (name, email, password_hash, email_verified_at)
VALUES ($1, $2, $3, $4)
`

type RegisterUserParams struct {
	Name            string     `db:"name" json:"name"`
	Email           string     `db:"email" json:"email"`
	PasswordHash    string     `db:"password_hash" json:"password_hash"`
	EmailVerifiedAt *time.Time `db:"email_verified_at" json:"email_verified_at"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.EmailVerifiedAt,
	)
	return err
}

const signInUser = `-- name: SignInUser :one
SELECT id, name, email, password_hash, email_verified_at, created_at, updated_at FROM users
WHERE email = $1 AND password_hash = $2
`

type SignInUserParams struct {
	Email        string `db:"email" json:"email"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
}

func (q *Queries) SignInUser(ctx context.Context, arg SignInUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, signInUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $2 
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.PasswordHash)
	return err
}

const updateSubscriptionStatus = `-- name: UpdateSubscriptionStatus :exec
UPDATE subscriptions
SET status = $1
WHERE id = $2
`

type UpdateSubscriptionStatusParams struct {
	Status string    `db:"status" json:"status"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateSubscriptionStatus(ctx context.Context, arg UpdateSubscriptionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSubscriptionStatus, arg.Status, arg.ID)
	return err
}
